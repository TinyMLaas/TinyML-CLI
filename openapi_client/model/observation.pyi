# coding: utf-8

"""
    TinyMLaaS

    TinyMLaaS Ecosystem for Machine Learning in IoT  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Observation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Class for getting and returning values for observation
    
    """


    class MetaOapg:
        required = {
            "device_id",
            "bridge_id",
            "observation_value",
        }
        
        class properties:
            bridge_id = schemas.IntSchema
            device_id = schemas.IntSchema
            observation_value = schemas.DictSchema
            __annotations__ = {
                "bridge_id": bridge_id,
                "device_id": device_id,
                "observation_value": observation_value,
            }
    
    device_id: MetaOapg.properties.device_id
    bridge_id: MetaOapg.properties.bridge_id
    observation_value: MetaOapg.properties.observation_value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bridge_id"]) -> MetaOapg.properties.bridge_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observation_value"]) -> MetaOapg.properties.observation_value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["bridge_id", "device_id", "observation_value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bridge_id"]) -> MetaOapg.properties.bridge_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_id"]) -> MetaOapg.properties.device_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observation_value"]) -> MetaOapg.properties.observation_value: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["bridge_id", "device_id", "observation_value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        device_id: typing.Union[MetaOapg.properties.device_id, decimal.Decimal, int, ],
        bridge_id: typing.Union[MetaOapg.properties.bridge_id, decimal.Decimal, int, ],
        observation_value: typing.Union[MetaOapg.properties.observation_value, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Observation':
        return super().__new__(
            cls,
            *_args,
            device_id=device_id,
            bridge_id=bridge_id,
            observation_value=observation_value,
            _configuration=_configuration,
            **kwargs,
        )
