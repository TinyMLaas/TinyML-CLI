# coding: utf-8

"""
    TinyMLaaS

    TinyMLaaS Ecosystem for Machine Learning in IoT  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Device(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    If Device is in database, it always has an id.
    
    """


    class MetaOapg:
        required = {
            "serial",
            "installer_id",
            "name",
            "description",
            "model",
            "id",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
                pass
            installer_id = schemas.IntSchema
            
            
            class model(
                schemas.StrSchema
            ):
                pass
            
            
            class description(
                schemas.StrSchema
            ):
                pass
            
            
            class serial(
                schemas.StrSchema
            ):
                pass
            id = schemas.IntSchema
            
            
            class connection(
                schemas.StrSchema
            ):
                pass
        
            @staticmethod
            def installer() -> typing.Type['Installer']:
                return Installer
        
            @staticmethod
            def bridge() -> typing.Type['Bridge']:
                return Bridge
            __annotations__ = {
                "name": name,
                "installer_id": installer_id,
                "model": model,
                "description": description,
                "serial": serial,
                "id": id,
                "connection": connection,
                "installer": installer,
                "bridge": bridge,
            }
    
    serial: MetaOapg.properties.serial
    installer_id: MetaOapg.properties.installer_id
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    model: MetaOapg.properties.model
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installer_id"]) -> MetaOapg.properties.installer_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connection"]) -> MetaOapg.properties.connection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["installer"]) -> 'Installer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bridge"]) -> 'Bridge': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "installer_id", "model", "description", "serial", "id", "connection", "installer", "bridge", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installer_id"]) -> MetaOapg.properties.installer_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model"]) -> MetaOapg.properties.model: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connection"]) -> typing.Union[MetaOapg.properties.connection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["installer"]) -> typing.Union['Installer', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bridge"]) -> typing.Union['Bridge', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "installer_id", "model", "description", "serial", "id", "connection", "installer", "bridge", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        serial: typing.Union[MetaOapg.properties.serial, str, ],
        installer_id: typing.Union[MetaOapg.properties.installer_id, decimal.Decimal, int, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        model: typing.Union[MetaOapg.properties.model, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        connection: typing.Union[MetaOapg.properties.connection, str, schemas.Unset] = schemas.unset,
        installer: typing.Union['Installer', schemas.Unset] = schemas.unset,
        bridge: typing.Union['Bridge', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Device':
        return super().__new__(
            cls,
            *_args,
            serial=serial,
            installer_id=installer_id,
            name=name,
            description=description,
            model=model,
            id=id,
            connection=connection,
            installer=installer,
            bridge=bridge,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.bridge import Bridge
from openapi_client.model.installer import Installer
