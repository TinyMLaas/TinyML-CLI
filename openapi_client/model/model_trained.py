# coding: utf-8

"""
    TinyMLaaS

    TinyMLaaS Ecosystem for Machine Learning in IoT  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ModelTrained(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A trained model includes prediction image, the prediction that 
the model has made of the image and some statistics in a plot.
    """


    class MetaOapg:
        required = {
            "statistic_image",
            "prediction",
            "prediction_image",
            "description",
            "id",
            "model_path",
            "parameters",
        }
        
        class properties:
            parameters = schemas.DictSchema
            description = schemas.StrSchema
            id = schemas.IntSchema
            model_path = schemas.StrSchema
            prediction_image = schemas.StrSchema
            prediction = schemas.StrSchema
            statistic_image = schemas.BinarySchema
            dataset_id = schemas.IntSchema
            created = schemas.DateTimeSchema
            __annotations__ = {
                "parameters": parameters,
                "description": description,
                "id": id,
                "model_path": model_path,
                "prediction_image": prediction_image,
                "prediction": prediction,
                "statistic_image": statistic_image,
                "dataset_id": dataset_id,
                "created": created,
            }
    
    statistic_image: MetaOapg.properties.statistic_image
    prediction: MetaOapg.properties.prediction
    prediction_image: MetaOapg.properties.prediction_image
    description: MetaOapg.properties.description
    id: MetaOapg.properties.id
    model_path: MetaOapg.properties.model_path
    parameters: MetaOapg.properties.parameters
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["model_path"]) -> MetaOapg.properties.model_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prediction_image"]) -> MetaOapg.properties.prediction_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prediction"]) -> MetaOapg.properties.prediction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statistic_image"]) -> MetaOapg.properties.statistic_image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataset_id"]) -> MetaOapg.properties.dataset_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["parameters", "description", "id", "model_path", "prediction_image", "prediction", "statistic_image", "dataset_id", "created", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["model_path"]) -> MetaOapg.properties.model_path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prediction_image"]) -> MetaOapg.properties.prediction_image: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prediction"]) -> MetaOapg.properties.prediction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statistic_image"]) -> MetaOapg.properties.statistic_image: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataset_id"]) -> typing.Union[MetaOapg.properties.dataset_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parameters", "description", "id", "model_path", "prediction_image", "prediction", "statistic_image", "dataset_id", "created", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        statistic_image: typing.Union[MetaOapg.properties.statistic_image, bytes, io.FileIO, io.BufferedReader, ],
        prediction: typing.Union[MetaOapg.properties.prediction, str, ],
        prediction_image: typing.Union[MetaOapg.properties.prediction_image, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, ],
        model_path: typing.Union[MetaOapg.properties.model_path, str, ],
        parameters: typing.Union[MetaOapg.properties.parameters, dict, frozendict.frozendict, ],
        dataset_id: typing.Union[MetaOapg.properties.dataset_id, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ModelTrained':
        return super().__new__(
            cls,
            *_args,
            statistic_image=statistic_image,
            prediction=prediction,
            prediction_image=prediction_image,
            description=description,
            id=id,
            model_path=model_path,
            parameters=parameters,
            dataset_id=dataset_id,
            created=created,
            _configuration=_configuration,
            **kwargs,
        )
