# coding: utf-8

"""
    TinyMLaaS

    TinyMLaaS Ecosystem for Machine Learning in IoT  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class BridgeDevice(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "product",
            "serial",
            "manufacturer",
        }
        
        class properties:
            manufacturer = schemas.StrSchema
            product = schemas.StrSchema
            serial = schemas.StrSchema
            __annotations__ = {
                "manufacturer": manufacturer,
                "product": product,
                "serial": serial,
            }
    
    product: MetaOapg.properties.product
    serial: MetaOapg.properties.serial
    manufacturer: MetaOapg.properties.manufacturer
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["manufacturer", "product", "serial", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manufacturer"]) -> MetaOapg.properties.manufacturer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product"]) -> MetaOapg.properties.product: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serial"]) -> MetaOapg.properties.serial: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["manufacturer", "product", "serial", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        product: typing.Union[MetaOapg.properties.product, str, ],
        serial: typing.Union[MetaOapg.properties.serial, str, ],
        manufacturer: typing.Union[MetaOapg.properties.manufacturer, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BridgeDevice':
        return super().__new__(
            cls,
            *_args,
            product=product,
            serial=serial,
            manufacturer=manufacturer,
            _configuration=_configuration,
            **kwargs,
        )
